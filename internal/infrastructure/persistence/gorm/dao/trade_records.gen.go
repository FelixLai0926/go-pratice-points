// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"points/internal/infrastructure/persistence/gorm/model"
)

func newTradeRecord(db *gorm.DB, opts ...gen.DOOption) tradeRecord {
	_tradeRecord := tradeRecord{}

	_tradeRecord.tradeRecordDo.UseDB(db, opts...)
	_tradeRecord.tradeRecordDo.UseModel(&model.TradeRecord{})

	tableName := _tradeRecord.tradeRecordDo.TableName()
	_tradeRecord.ALL = field.NewAsterisk(tableName)
	_tradeRecord.TransactionID = field.NewString(tableName, "transaction_id")
	_tradeRecord.Nonce = field.NewInt64(tableName, "nonce")
	_tradeRecord.FromAccountID = field.NewInt64(tableName, "from_account_id")
	_tradeRecord.ToAccountID = field.NewInt64(tableName, "to_account_id")
	_tradeRecord.Amount = field.NewField(tableName, "amount")
	_tradeRecord.Status = field.NewInt32(tableName, "status")
	_tradeRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_tradeRecord.UpdatedAt = field.NewTime(tableName, "updated_at")

	_tradeRecord.fillFieldMap()

	return _tradeRecord
}

type tradeRecord struct {
	tradeRecordDo

	ALL           field.Asterisk
	TransactionID field.String
	Nonce         field.Int64
	FromAccountID field.Int64
	ToAccountID   field.Int64
	Amount        field.Field
	Status        field.Int32
	CreatedAt     field.Time
	UpdatedAt     field.Time

	fieldMap map[string]field.Expr
}

func (t tradeRecord) Table(newTableName string) *tradeRecord {
	t.tradeRecordDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tradeRecord) As(alias string) *tradeRecord {
	t.tradeRecordDo.DO = *(t.tradeRecordDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tradeRecord) updateTableName(table string) *tradeRecord {
	t.ALL = field.NewAsterisk(table)
	t.TransactionID = field.NewString(table, "transaction_id")
	t.Nonce = field.NewInt64(table, "nonce")
	t.FromAccountID = field.NewInt64(table, "from_account_id")
	t.ToAccountID = field.NewInt64(table, "to_account_id")
	t.Amount = field.NewField(table, "amount")
	t.Status = field.NewInt32(table, "status")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *tradeRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tradeRecord) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["transaction_id"] = t.TransactionID
	t.fieldMap["nonce"] = t.Nonce
	t.fieldMap["from_account_id"] = t.FromAccountID
	t.fieldMap["to_account_id"] = t.ToAccountID
	t.fieldMap["amount"] = t.Amount
	t.fieldMap["status"] = t.Status
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t tradeRecord) clone(db *gorm.DB) tradeRecord {
	t.tradeRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tradeRecord) replaceDB(db *gorm.DB) tradeRecord {
	t.tradeRecordDo.ReplaceDB(db)
	return t
}

type tradeRecordDo struct{ gen.DO }

type ITradeRecordDo interface {
	gen.SubQuery
	Debug() ITradeRecordDo
	WithContext(ctx context.Context) ITradeRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITradeRecordDo
	WriteDB() ITradeRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITradeRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITradeRecordDo
	Not(conds ...gen.Condition) ITradeRecordDo
	Or(conds ...gen.Condition) ITradeRecordDo
	Select(conds ...field.Expr) ITradeRecordDo
	Where(conds ...gen.Condition) ITradeRecordDo
	Order(conds ...field.Expr) ITradeRecordDo
	Distinct(cols ...field.Expr) ITradeRecordDo
	Omit(cols ...field.Expr) ITradeRecordDo
	Join(table schema.Tabler, on ...field.Expr) ITradeRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITradeRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITradeRecordDo
	Group(cols ...field.Expr) ITradeRecordDo
	Having(conds ...gen.Condition) ITradeRecordDo
	Limit(limit int) ITradeRecordDo
	Offset(offset int) ITradeRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITradeRecordDo
	Unscoped() ITradeRecordDo
	Create(values ...*model.TradeRecord) error
	CreateInBatches(values []*model.TradeRecord, batchSize int) error
	Save(values ...*model.TradeRecord) error
	First() (*model.TradeRecord, error)
	Take() (*model.TradeRecord, error)
	Last() (*model.TradeRecord, error)
	Find() ([]*model.TradeRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TradeRecord, err error)
	FindInBatches(result *[]*model.TradeRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TradeRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITradeRecordDo
	Assign(attrs ...field.AssignExpr) ITradeRecordDo
	Joins(fields ...field.RelationField) ITradeRecordDo
	Preload(fields ...field.RelationField) ITradeRecordDo
	FirstOrInit() (*model.TradeRecord, error)
	FirstOrCreate() (*model.TradeRecord, error)
	FindByPage(offset int, limit int) (result []*model.TradeRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITradeRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tradeRecordDo) Debug() ITradeRecordDo {
	return t.withDO(t.DO.Debug())
}

func (t tradeRecordDo) WithContext(ctx context.Context) ITradeRecordDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tradeRecordDo) ReadDB() ITradeRecordDo {
	return t.Clauses(dbresolver.Read)
}

func (t tradeRecordDo) WriteDB() ITradeRecordDo {
	return t.Clauses(dbresolver.Write)
}

func (t tradeRecordDo) Session(config *gorm.Session) ITradeRecordDo {
	return t.withDO(t.DO.Session(config))
}

func (t tradeRecordDo) Clauses(conds ...clause.Expression) ITradeRecordDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tradeRecordDo) Returning(value interface{}, columns ...string) ITradeRecordDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tradeRecordDo) Not(conds ...gen.Condition) ITradeRecordDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tradeRecordDo) Or(conds ...gen.Condition) ITradeRecordDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tradeRecordDo) Select(conds ...field.Expr) ITradeRecordDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tradeRecordDo) Where(conds ...gen.Condition) ITradeRecordDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tradeRecordDo) Order(conds ...field.Expr) ITradeRecordDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tradeRecordDo) Distinct(cols ...field.Expr) ITradeRecordDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tradeRecordDo) Omit(cols ...field.Expr) ITradeRecordDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tradeRecordDo) Join(table schema.Tabler, on ...field.Expr) ITradeRecordDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tradeRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITradeRecordDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tradeRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) ITradeRecordDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tradeRecordDo) Group(cols ...field.Expr) ITradeRecordDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tradeRecordDo) Having(conds ...gen.Condition) ITradeRecordDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tradeRecordDo) Limit(limit int) ITradeRecordDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tradeRecordDo) Offset(offset int) ITradeRecordDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tradeRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITradeRecordDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tradeRecordDo) Unscoped() ITradeRecordDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tradeRecordDo) Create(values ...*model.TradeRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tradeRecordDo) CreateInBatches(values []*model.TradeRecord, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tradeRecordDo) Save(values ...*model.TradeRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tradeRecordDo) First() (*model.TradeRecord, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TradeRecord), nil
	}
}

func (t tradeRecordDo) Take() (*model.TradeRecord, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TradeRecord), nil
	}
}

func (t tradeRecordDo) Last() (*model.TradeRecord, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TradeRecord), nil
	}
}

func (t tradeRecordDo) Find() ([]*model.TradeRecord, error) {
	result, err := t.DO.Find()
	return result.([]*model.TradeRecord), err
}

func (t tradeRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TradeRecord, err error) {
	buf := make([]*model.TradeRecord, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tradeRecordDo) FindInBatches(result *[]*model.TradeRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tradeRecordDo) Attrs(attrs ...field.AssignExpr) ITradeRecordDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tradeRecordDo) Assign(attrs ...field.AssignExpr) ITradeRecordDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tradeRecordDo) Joins(fields ...field.RelationField) ITradeRecordDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tradeRecordDo) Preload(fields ...field.RelationField) ITradeRecordDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tradeRecordDo) FirstOrInit() (*model.TradeRecord, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TradeRecord), nil
	}
}

func (t tradeRecordDo) FirstOrCreate() (*model.TradeRecord, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TradeRecord), nil
	}
}

func (t tradeRecordDo) FindByPage(offset int, limit int) (result []*model.TradeRecord, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tradeRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tradeRecordDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tradeRecordDo) Delete(models ...*model.TradeRecord) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tradeRecordDo) withDO(do gen.Dao) *tradeRecordDo {
	t.DO = *do.(*gen.DO)
	return t
}
