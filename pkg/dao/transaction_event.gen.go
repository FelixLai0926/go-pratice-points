// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"points/pkg/models/orm"
)

func newTransactionEvent(db *gorm.DB, opts ...gen.DOOption) transactionEvent {
	_transactionEvent := transactionEvent{}

	_transactionEvent.transactionEventDo.UseDB(db, opts...)
	_transactionEvent.transactionEventDo.UseModel(&orm.TransactionEvent{})

	tableName := _transactionEvent.transactionEventDo.TableName()
	_transactionEvent.ALL = field.NewAsterisk(tableName)
	_transactionEvent.ID = field.NewInt32(tableName, "id")
	_transactionEvent.TransactionID = field.NewString(tableName, "transaction_id")
	_transactionEvent.EventType = field.NewString(tableName, "event_type")
	_transactionEvent.Payload = field.NewString(tableName, "payload")
	_transactionEvent.CreatedAt = field.NewTime(tableName, "created_at")

	_transactionEvent.fillFieldMap()

	return _transactionEvent
}

type transactionEvent struct {
	transactionEventDo

	ALL           field.Asterisk
	ID            field.Int32
	TransactionID field.String
	EventType     field.String
	Payload       field.String
	CreatedAt     field.Time

	fieldMap map[string]field.Expr
}

func (t transactionEvent) Table(newTableName string) *transactionEvent {
	t.transactionEventDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t transactionEvent) As(alias string) *transactionEvent {
	t.transactionEventDo.DO = *(t.transactionEventDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *transactionEvent) updateTableName(table string) *transactionEvent {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.TransactionID = field.NewString(table, "transaction_id")
	t.EventType = field.NewString(table, "event_type")
	t.Payload = field.NewString(table, "payload")
	t.CreatedAt = field.NewTime(table, "created_at")

	t.fillFieldMap()

	return t
}

func (t *transactionEvent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *transactionEvent) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["id"] = t.ID
	t.fieldMap["transaction_id"] = t.TransactionID
	t.fieldMap["event_type"] = t.EventType
	t.fieldMap["payload"] = t.Payload
	t.fieldMap["created_at"] = t.CreatedAt
}

func (t transactionEvent) clone(db *gorm.DB) transactionEvent {
	t.transactionEventDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t transactionEvent) replaceDB(db *gorm.DB) transactionEvent {
	t.transactionEventDo.ReplaceDB(db)
	return t
}

type transactionEventDo struct{ gen.DO }

type ITransactionEventDo interface {
	gen.SubQuery
	Debug() ITransactionEventDo
	WithContext(ctx context.Context) ITransactionEventDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITransactionEventDo
	WriteDB() ITransactionEventDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITransactionEventDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITransactionEventDo
	Not(conds ...gen.Condition) ITransactionEventDo
	Or(conds ...gen.Condition) ITransactionEventDo
	Select(conds ...field.Expr) ITransactionEventDo
	Where(conds ...gen.Condition) ITransactionEventDo
	Order(conds ...field.Expr) ITransactionEventDo
	Distinct(cols ...field.Expr) ITransactionEventDo
	Omit(cols ...field.Expr) ITransactionEventDo
	Join(table schema.Tabler, on ...field.Expr) ITransactionEventDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITransactionEventDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITransactionEventDo
	Group(cols ...field.Expr) ITransactionEventDo
	Having(conds ...gen.Condition) ITransactionEventDo
	Limit(limit int) ITransactionEventDo
	Offset(offset int) ITransactionEventDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactionEventDo
	Unscoped() ITransactionEventDo
	Create(values ...*orm.TransactionEvent) error
	CreateInBatches(values []*orm.TransactionEvent, batchSize int) error
	Save(values ...*orm.TransactionEvent) error
	First() (*orm.TransactionEvent, error)
	Take() (*orm.TransactionEvent, error)
	Last() (*orm.TransactionEvent, error)
	Find() ([]*orm.TransactionEvent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*orm.TransactionEvent, err error)
	FindInBatches(result *[]*orm.TransactionEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*orm.TransactionEvent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITransactionEventDo
	Assign(attrs ...field.AssignExpr) ITransactionEventDo
	Joins(fields ...field.RelationField) ITransactionEventDo
	Preload(fields ...field.RelationField) ITransactionEventDo
	FirstOrInit() (*orm.TransactionEvent, error)
	FirstOrCreate() (*orm.TransactionEvent, error)
	FindByPage(offset int, limit int) (result []*orm.TransactionEvent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITransactionEventDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t transactionEventDo) Debug() ITransactionEventDo {
	return t.withDO(t.DO.Debug())
}

func (t transactionEventDo) WithContext(ctx context.Context) ITransactionEventDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t transactionEventDo) ReadDB() ITransactionEventDo {
	return t.Clauses(dbresolver.Read)
}

func (t transactionEventDo) WriteDB() ITransactionEventDo {
	return t.Clauses(dbresolver.Write)
}

func (t transactionEventDo) Session(config *gorm.Session) ITransactionEventDo {
	return t.withDO(t.DO.Session(config))
}

func (t transactionEventDo) Clauses(conds ...clause.Expression) ITransactionEventDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t transactionEventDo) Returning(value interface{}, columns ...string) ITransactionEventDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t transactionEventDo) Not(conds ...gen.Condition) ITransactionEventDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t transactionEventDo) Or(conds ...gen.Condition) ITransactionEventDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t transactionEventDo) Select(conds ...field.Expr) ITransactionEventDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t transactionEventDo) Where(conds ...gen.Condition) ITransactionEventDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t transactionEventDo) Order(conds ...field.Expr) ITransactionEventDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t transactionEventDo) Distinct(cols ...field.Expr) ITransactionEventDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t transactionEventDo) Omit(cols ...field.Expr) ITransactionEventDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t transactionEventDo) Join(table schema.Tabler, on ...field.Expr) ITransactionEventDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t transactionEventDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITransactionEventDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t transactionEventDo) RightJoin(table schema.Tabler, on ...field.Expr) ITransactionEventDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t transactionEventDo) Group(cols ...field.Expr) ITransactionEventDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t transactionEventDo) Having(conds ...gen.Condition) ITransactionEventDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t transactionEventDo) Limit(limit int) ITransactionEventDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t transactionEventDo) Offset(offset int) ITransactionEventDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t transactionEventDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactionEventDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t transactionEventDo) Unscoped() ITransactionEventDo {
	return t.withDO(t.DO.Unscoped())
}

func (t transactionEventDo) Create(values ...*orm.TransactionEvent) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t transactionEventDo) CreateInBatches(values []*orm.TransactionEvent, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t transactionEventDo) Save(values ...*orm.TransactionEvent) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t transactionEventDo) First() (*orm.TransactionEvent, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*orm.TransactionEvent), nil
	}
}

func (t transactionEventDo) Take() (*orm.TransactionEvent, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*orm.TransactionEvent), nil
	}
}

func (t transactionEventDo) Last() (*orm.TransactionEvent, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*orm.TransactionEvent), nil
	}
}

func (t transactionEventDo) Find() ([]*orm.TransactionEvent, error) {
	result, err := t.DO.Find()
	return result.([]*orm.TransactionEvent), err
}

func (t transactionEventDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*orm.TransactionEvent, err error) {
	buf := make([]*orm.TransactionEvent, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t transactionEventDo) FindInBatches(result *[]*orm.TransactionEvent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t transactionEventDo) Attrs(attrs ...field.AssignExpr) ITransactionEventDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t transactionEventDo) Assign(attrs ...field.AssignExpr) ITransactionEventDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t transactionEventDo) Joins(fields ...field.RelationField) ITransactionEventDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t transactionEventDo) Preload(fields ...field.RelationField) ITransactionEventDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t transactionEventDo) FirstOrInit() (*orm.TransactionEvent, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*orm.TransactionEvent), nil
	}
}

func (t transactionEventDo) FirstOrCreate() (*orm.TransactionEvent, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*orm.TransactionEvent), nil
	}
}

func (t transactionEventDo) FindByPage(offset int, limit int) (result []*orm.TransactionEvent, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t transactionEventDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t transactionEventDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t transactionEventDo) Delete(models ...*orm.TransactionEvent) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *transactionEventDo) withDO(do gen.Dao) *transactionEventDo {
	t.DO = *do.(*gen.DO)
	return t
}
