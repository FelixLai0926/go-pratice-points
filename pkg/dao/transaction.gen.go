// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"points/pkg/models/orm"
)

func newTransactionDAO(db *gorm.DB, opts ...gen.DOOption) transactionDAO {
	_transactionDAO := transactionDAO{}

	_transactionDAO.transactionDAODo.UseDB(db, opts...)
	_transactionDAO.transactionDAODo.UseModel(&orm.TransactionDAO{})

	tableName := _transactionDAO.transactionDAODo.TableName()
	_transactionDAO.ALL = field.NewAsterisk(tableName)
	_transactionDAO.TransactionID = field.NewString(tableName, "transaction_id")
	_transactionDAO.Nonce = field.NewInt64(tableName, "nonce")
	_transactionDAO.FromAccountID = field.NewInt64(tableName, "from_account_id")
	_transactionDAO.ToAccountID = field.NewInt64(tableName, "to_account_id")
	_transactionDAO.Amount = field.NewField(tableName, "amount")
	_transactionDAO.Status = field.NewInt32(tableName, "status")
	_transactionDAO.CreatedAt = field.NewTime(tableName, "created_at")
	_transactionDAO.UpdatedAt = field.NewTime(tableName, "updated_at")

	_transactionDAO.fillFieldMap()

	return _transactionDAO
}

type transactionDAO struct {
	transactionDAODo

	ALL           field.Asterisk
	TransactionID field.String
	Nonce         field.Int64
	FromAccountID field.Int64
	ToAccountID   field.Int64
	Amount        field.Field
	Status        field.Int32
	CreatedAt     field.Time
	UpdatedAt     field.Time

	fieldMap map[string]field.Expr
}

func (t transactionDAO) Table(newTableName string) *transactionDAO {
	t.transactionDAODo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t transactionDAO) As(alias string) *transactionDAO {
	t.transactionDAODo.DO = *(t.transactionDAODo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *transactionDAO) updateTableName(table string) *transactionDAO {
	t.ALL = field.NewAsterisk(table)
	t.TransactionID = field.NewString(table, "transaction_id")
	t.Nonce = field.NewInt64(table, "nonce")
	t.FromAccountID = field.NewInt64(table, "from_account_id")
	t.ToAccountID = field.NewInt64(table, "to_account_id")
	t.Amount = field.NewField(table, "amount")
	t.Status = field.NewInt32(table, "status")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *transactionDAO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *transactionDAO) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["transaction_id"] = t.TransactionID
	t.fieldMap["nonce"] = t.Nonce
	t.fieldMap["from_account_id"] = t.FromAccountID
	t.fieldMap["to_account_id"] = t.ToAccountID
	t.fieldMap["amount"] = t.Amount
	t.fieldMap["status"] = t.Status
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t transactionDAO) clone(db *gorm.DB) transactionDAO {
	t.transactionDAODo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t transactionDAO) replaceDB(db *gorm.DB) transactionDAO {
	t.transactionDAODo.ReplaceDB(db)
	return t
}

type transactionDAODo struct{ gen.DO }

type ITransactionDAODo interface {
	gen.SubQuery
	Debug() ITransactionDAODo
	WithContext(ctx context.Context) ITransactionDAODo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITransactionDAODo
	WriteDB() ITransactionDAODo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITransactionDAODo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITransactionDAODo
	Not(conds ...gen.Condition) ITransactionDAODo
	Or(conds ...gen.Condition) ITransactionDAODo
	Select(conds ...field.Expr) ITransactionDAODo
	Where(conds ...gen.Condition) ITransactionDAODo
	Order(conds ...field.Expr) ITransactionDAODo
	Distinct(cols ...field.Expr) ITransactionDAODo
	Omit(cols ...field.Expr) ITransactionDAODo
	Join(table schema.Tabler, on ...field.Expr) ITransactionDAODo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITransactionDAODo
	RightJoin(table schema.Tabler, on ...field.Expr) ITransactionDAODo
	Group(cols ...field.Expr) ITransactionDAODo
	Having(conds ...gen.Condition) ITransactionDAODo
	Limit(limit int) ITransactionDAODo
	Offset(offset int) ITransactionDAODo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactionDAODo
	Unscoped() ITransactionDAODo
	Create(values ...*orm.TransactionDAO) error
	CreateInBatches(values []*orm.TransactionDAO, batchSize int) error
	Save(values ...*orm.TransactionDAO) error
	First() (*orm.TransactionDAO, error)
	Take() (*orm.TransactionDAO, error)
	Last() (*orm.TransactionDAO, error)
	Find() ([]*orm.TransactionDAO, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*orm.TransactionDAO, err error)
	FindInBatches(result *[]*orm.TransactionDAO, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*orm.TransactionDAO) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITransactionDAODo
	Assign(attrs ...field.AssignExpr) ITransactionDAODo
	Joins(fields ...field.RelationField) ITransactionDAODo
	Preload(fields ...field.RelationField) ITransactionDAODo
	FirstOrInit() (*orm.TransactionDAO, error)
	FirstOrCreate() (*orm.TransactionDAO, error)
	FindByPage(offset int, limit int) (result []*orm.TransactionDAO, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITransactionDAODo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t transactionDAODo) Debug() ITransactionDAODo {
	return t.withDO(t.DO.Debug())
}

func (t transactionDAODo) WithContext(ctx context.Context) ITransactionDAODo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t transactionDAODo) ReadDB() ITransactionDAODo {
	return t.Clauses(dbresolver.Read)
}

func (t transactionDAODo) WriteDB() ITransactionDAODo {
	return t.Clauses(dbresolver.Write)
}

func (t transactionDAODo) Session(config *gorm.Session) ITransactionDAODo {
	return t.withDO(t.DO.Session(config))
}

func (t transactionDAODo) Clauses(conds ...clause.Expression) ITransactionDAODo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t transactionDAODo) Returning(value interface{}, columns ...string) ITransactionDAODo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t transactionDAODo) Not(conds ...gen.Condition) ITransactionDAODo {
	return t.withDO(t.DO.Not(conds...))
}

func (t transactionDAODo) Or(conds ...gen.Condition) ITransactionDAODo {
	return t.withDO(t.DO.Or(conds...))
}

func (t transactionDAODo) Select(conds ...field.Expr) ITransactionDAODo {
	return t.withDO(t.DO.Select(conds...))
}

func (t transactionDAODo) Where(conds ...gen.Condition) ITransactionDAODo {
	return t.withDO(t.DO.Where(conds...))
}

func (t transactionDAODo) Order(conds ...field.Expr) ITransactionDAODo {
	return t.withDO(t.DO.Order(conds...))
}

func (t transactionDAODo) Distinct(cols ...field.Expr) ITransactionDAODo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t transactionDAODo) Omit(cols ...field.Expr) ITransactionDAODo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t transactionDAODo) Join(table schema.Tabler, on ...field.Expr) ITransactionDAODo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t transactionDAODo) LeftJoin(table schema.Tabler, on ...field.Expr) ITransactionDAODo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t transactionDAODo) RightJoin(table schema.Tabler, on ...field.Expr) ITransactionDAODo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t transactionDAODo) Group(cols ...field.Expr) ITransactionDAODo {
	return t.withDO(t.DO.Group(cols...))
}

func (t transactionDAODo) Having(conds ...gen.Condition) ITransactionDAODo {
	return t.withDO(t.DO.Having(conds...))
}

func (t transactionDAODo) Limit(limit int) ITransactionDAODo {
	return t.withDO(t.DO.Limit(limit))
}

func (t transactionDAODo) Offset(offset int) ITransactionDAODo {
	return t.withDO(t.DO.Offset(offset))
}

func (t transactionDAODo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITransactionDAODo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t transactionDAODo) Unscoped() ITransactionDAODo {
	return t.withDO(t.DO.Unscoped())
}

func (t transactionDAODo) Create(values ...*orm.TransactionDAO) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t transactionDAODo) CreateInBatches(values []*orm.TransactionDAO, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t transactionDAODo) Save(values ...*orm.TransactionDAO) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t transactionDAODo) First() (*orm.TransactionDAO, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*orm.TransactionDAO), nil
	}
}

func (t transactionDAODo) Take() (*orm.TransactionDAO, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*orm.TransactionDAO), nil
	}
}

func (t transactionDAODo) Last() (*orm.TransactionDAO, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*orm.TransactionDAO), nil
	}
}

func (t transactionDAODo) Find() ([]*orm.TransactionDAO, error) {
	result, err := t.DO.Find()
	return result.([]*orm.TransactionDAO), err
}

func (t transactionDAODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*orm.TransactionDAO, err error) {
	buf := make([]*orm.TransactionDAO, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t transactionDAODo) FindInBatches(result *[]*orm.TransactionDAO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t transactionDAODo) Attrs(attrs ...field.AssignExpr) ITransactionDAODo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t transactionDAODo) Assign(attrs ...field.AssignExpr) ITransactionDAODo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t transactionDAODo) Joins(fields ...field.RelationField) ITransactionDAODo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t transactionDAODo) Preload(fields ...field.RelationField) ITransactionDAODo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t transactionDAODo) FirstOrInit() (*orm.TransactionDAO, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*orm.TransactionDAO), nil
	}
}

func (t transactionDAODo) FirstOrCreate() (*orm.TransactionDAO, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*orm.TransactionDAO), nil
	}
}

func (t transactionDAODo) FindByPage(offset int, limit int) (result []*orm.TransactionDAO, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t transactionDAODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t transactionDAODo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t transactionDAODo) Delete(models ...*orm.TransactionDAO) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *transactionDAODo) withDO(do gen.Dao) *transactionDAODo {
	t.DO = *do.(*gen.DO)
	return t
}
