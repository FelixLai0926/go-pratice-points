// Code generated by MockGen. DO NOT EDIT.
// Source: D:/Practice/go-practice/points/internal/domain/repository/transaction_event_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entity "points/internal/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionEventRepository is a mock of TransactionEventRepository interface.
type MockTransactionEventRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionEventRepositoryMockRecorder
}

// MockTransactionEventRepositoryMockRecorder is the mock recorder for MockTransactionEventRepository.
type MockTransactionEventRepositoryMockRecorder struct {
	mock *MockTransactionEventRepository
}

// NewMockTransactionEventRepository creates a new mock instance.
func NewMockTransactionEventRepository(ctrl *gomock.Controller) *MockTransactionEventRepository {
	mock := &MockTransactionEventRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionEventRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionEventRepository) EXPECT() *MockTransactionEventRepositoryMockRecorder {
	return m.recorder
}

// CreateTransactionEvent mocks base method.
func (m *MockTransactionEventRepository) CreateTransactionEvent(ctx context.Context, event *entity.TransactionEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransactionEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransactionEvent indicates an expected call of CreateTransactionEvent.
func (mr *MockTransactionEventRepositoryMockRecorder) CreateTransactionEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransactionEvent", reflect.TypeOf((*MockTransactionEventRepository)(nil).CreateTransactionEvent), ctx, event)
}
