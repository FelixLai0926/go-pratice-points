// Code generated by MockGen. DO NOT EDIT.
// Source: D:/Practice/go-practice/points/internal/domain/repository/account_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entity "points/internal/domain/entity"
	valueobject "points/internal/domain/valueobject"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountRepository) CreateAccount(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountRepositoryMockRecorder) CreateAccount(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountRepository)(nil).CreateAccount), ctx, userID)
}

// GetAccount mocks base method.
func (m *MockAccountRepository) GetAccount(ctx context.Context, userID int64) (*entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, userID)
	ret0, _ := ret[0].(*entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountRepositoryMockRecorder) GetAccount(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountRepository)(nil).GetAccount), ctx, userID)
}

// ReserveBalance mocks base method.
func (m *MockAccountRepository) ReserveBalance(ctx context.Context, userID int64, amount valueobject.Money) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveBalance", ctx, userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReserveBalance indicates an expected call of ReserveBalance.
func (mr *MockAccountRepositoryMockRecorder) ReserveBalance(ctx, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveBalance", reflect.TypeOf((*MockAccountRepository)(nil).ReserveBalance), ctx, userID, amount)
}

// UnreserveBalance mocks base method.
func (m *MockAccountRepository) UnreserveBalance(ctx context.Context, from, to int64, amount valueobject.Money) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnreserveBalance", ctx, from, to, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnreserveBalance indicates an expected call of UnreserveBalance.
func (mr *MockAccountRepositoryMockRecorder) UnreserveBalance(ctx, from, to, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnreserveBalance", reflect.TypeOf((*MockAccountRepository)(nil).UnreserveBalance), ctx, from, to, amount)
}
