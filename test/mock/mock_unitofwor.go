// Code generated by MockGen. DO NOT EDIT.
// Source: D:/Practice/go-practice/points/internal/domain/repository/unitofwork.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	repository "points/internal/domain/repository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUnitOfWork is a mock of UnitOfWork interface.
type MockUnitOfWork struct {
	ctrl     *gomock.Controller
	recorder *MockUnitOfWorkMockRecorder
}

// MockUnitOfWorkMockRecorder is the mock recorder for MockUnitOfWork.
type MockUnitOfWorkMockRecorder struct {
	mock *MockUnitOfWork
}

// NewMockUnitOfWork creates a new mock instance.
func NewMockUnitOfWork(ctrl *gomock.Controller) *MockUnitOfWork {
	mock := &MockUnitOfWork{ctrl: ctrl}
	mock.recorder = &MockUnitOfWorkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitOfWork) EXPECT() *MockUnitOfWorkMockRecorder {
	return m.recorder
}

// AccountRepository mocks base method.
func (m *MockUnitOfWork) AccountRepository() repository.AccountRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountRepository")
	ret0, _ := ret[0].(repository.AccountRepository)
	return ret0
}

// AccountRepository indicates an expected call of AccountRepository.
func (mr *MockUnitOfWorkMockRecorder) AccountRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountRepository", reflect.TypeOf((*MockUnitOfWork)(nil).AccountRepository))
}

// TradeRecordsRepository mocks base method.
func (m *MockUnitOfWork) TradeRecordsRepository() repository.TradeRecordsRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TradeRecordsRepository")
	ret0, _ := ret[0].(repository.TradeRecordsRepository)
	return ret0
}

// TradeRecordsRepository indicates an expected call of TradeRecordsRepository.
func (mr *MockUnitOfWorkMockRecorder) TradeRecordsRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TradeRecordsRepository", reflect.TypeOf((*MockUnitOfWork)(nil).TradeRecordsRepository))
}

// Transaction mocks base method.
func (m *MockUnitOfWork) Transaction(arg0 context.Context, arg1 func(repository.UnitOfWork) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockUnitOfWorkMockRecorder) Transaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockUnitOfWork)(nil).Transaction), arg0, arg1)
}

// TransactionEventRepository mocks base method.
func (m *MockUnitOfWork) TransactionEventRepository() repository.TransactionEventRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionEventRepository")
	ret0, _ := ret[0].(repository.TransactionEventRepository)
	return ret0
}

// TransactionEventRepository indicates an expected call of TransactionEventRepository.
func (mr *MockUnitOfWorkMockRecorder) TransactionEventRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionEventRepository", reflect.TypeOf((*MockUnitOfWork)(nil).TransactionEventRepository))
}
