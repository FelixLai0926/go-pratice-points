// Code generated by MockGen. DO NOT EDIT.
// Source: D:/Practice/go-practice/points/internal/domain/trade_usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	command "points/internal/domain/command"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTradeUsecase is a mock of TradeUsecase interface.
type MockTradeUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockTradeUsecaseMockRecorder
}

// MockTradeUsecaseMockRecorder is the mock recorder for MockTradeUsecase.
type MockTradeUsecaseMockRecorder struct {
	mock *MockTradeUsecase
}

// NewMockTradeUsecase creates a new mock instance.
func NewMockTradeUsecase(ctrl *gomock.Controller) *MockTradeUsecase {
	mock := &MockTradeUsecase{ctrl: ctrl}
	mock.recorder = &MockTradeUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradeUsecase) EXPECT() *MockTradeUsecaseMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockTradeUsecase) Cancel(ctx context.Context, req *command.CancelCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockTradeUsecaseMockRecorder) Cancel(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockTradeUsecase)(nil).Cancel), ctx, req)
}

// ManualConfirm mocks base method.
func (m *MockTradeUsecase) ManualConfirm(ctx context.Context, req *command.ConfirmCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManualConfirm", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ManualConfirm indicates an expected call of ManualConfirm.
func (mr *MockTradeUsecaseMockRecorder) ManualConfirm(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManualConfirm", reflect.TypeOf((*MockTradeUsecase)(nil).ManualConfirm), ctx, req)
}

// Transfer mocks base method.
func (m *MockTradeUsecase) Transfer(ctx context.Context, req *command.TransferCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockTradeUsecaseMockRecorder) Transfer(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockTradeUsecase)(nil).Transfer), ctx, req)
}
