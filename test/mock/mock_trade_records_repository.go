// Code generated by MockGen. DO NOT EDIT.
// Source: D:/Practice/go-practice/points/internal/domain/repository/trade_records_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entity "points/internal/domain/entity"
	valueobject "points/internal/domain/valueobject"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTradeRecordsRepository is a mock of TradeRecordsRepository interface.
type MockTradeRecordsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTradeRecordsRepositoryMockRecorder
}

// MockTradeRecordsRepositoryMockRecorder is the mock recorder for MockTradeRecordsRepository.
type MockTradeRecordsRepositoryMockRecorder struct {
	mock *MockTradeRecordsRepository
}

// NewMockTradeRecordsRepository creates a new mock instance.
func NewMockTradeRecordsRepository(ctrl *gomock.Controller) *MockTradeRecordsRepository {
	mock := &MockTradeRecordsRepository{ctrl: ctrl}
	mock.recorder = &MockTradeRecordsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradeRecordsRepository) EXPECT() *MockTradeRecordsRepositoryMockRecorder {
	return m.recorder
}

// CreateOrUpdateTradeRecord mocks base method.
func (m *MockTradeRecordsRepository) CreateOrUpdateTradeRecord(ctx context.Context, trans *entity.TradeRecords) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateTradeRecord", ctx, trans)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateTradeRecord indicates an expected call of CreateOrUpdateTradeRecord.
func (mr *MockTradeRecordsRepositoryMockRecorder) CreateOrUpdateTradeRecord(ctx, trans interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateTradeRecord", reflect.TypeOf((*MockTradeRecordsRepository)(nil).CreateOrUpdateTradeRecord), ctx, trans)
}

// CreateTradeRecord mocks base method.
func (m *MockTradeRecordsRepository) CreateTradeRecord(ctx context.Context, trans *entity.TradeRecords) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTradeRecord", ctx, trans)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTradeRecord indicates an expected call of CreateTradeRecord.
func (mr *MockTradeRecordsRepositoryMockRecorder) CreateTradeRecord(ctx, trans interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTradeRecord", reflect.TypeOf((*MockTradeRecordsRepository)(nil).CreateTradeRecord), ctx, trans)
}

// GetTradeRecord mocks base method.
func (m *MockTradeRecordsRepository) GetTradeRecord(ctx context.Context, nonce, from int64, status *valueobject.TccStatus) (*entity.TradeRecords, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradeRecord", ctx, nonce, from, status)
	ret0, _ := ret[0].(*entity.TradeRecords)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradeRecord indicates an expected call of GetTradeRecord.
func (mr *MockTradeRecordsRepositoryMockRecorder) GetTradeRecord(ctx, nonce, from, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradeRecord", reflect.TypeOf((*MockTradeRecordsRepository)(nil).GetTradeRecord), ctx, nonce, from, status)
}

// UpdateTradeRecord mocks base method.
func (m *MockTradeRecordsRepository) UpdateTradeRecord(ctx context.Context, trans *entity.TradeRecords) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTradeRecord", ctx, trans)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTradeRecord indicates an expected call of UpdateTradeRecord.
func (mr *MockTradeRecordsRepositoryMockRecorder) UpdateTradeRecord(ctx, trans interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTradeRecord", reflect.TypeOf((*MockTradeRecordsRepository)(nil).UpdateTradeRecord), ctx, trans)
}
