// Code generated by MockGen. DO NOT EDIT.
// Source: D:/Practice/go-practice/points/internal/domain/port/config.go

// Package mock is a generated GoMock package.
package mock

import (
	port "points/internal/domain/port"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// Copy mocks base method.
func (m *MockConfig) Copy(dst, src interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy", dst, src)
	ret0, _ := ret[0].(error)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockConfigMockRecorder) Copy(dst, src interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockConfig)(nil).Copy), dst, src)
}

// GetInt mocks base method.
func (m *MockConfig) GetInt(key string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt", key)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetInt indicates an expected call of GetInt.
func (mr *MockConfigMockRecorder) GetInt(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt", reflect.TypeOf((*MockConfig)(nil).GetInt), key)
}

// GetString mocks base method.
func (m *MockConfig) GetString(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetString indicates an expected call of GetString.
func (mr *MockConfigMockRecorder) GetString(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockConfig)(nil).GetString), key)
}

// SetDefault mocks base method.
func (m *MockConfig) SetDefault(req interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefault", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefault indicates an expected call of SetDefault.
func (mr *MockConfigMockRecorder) SetDefault(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefault", reflect.TypeOf((*MockConfig)(nil).SetDefault), req)
}

// SetDefaultInt mocks base method.
func (m *MockConfig) SetDefaultInt(key string, value int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDefaultInt", key, value)
}

// SetDefaultInt indicates an expected call of SetDefaultInt.
func (mr *MockConfigMockRecorder) SetDefaultInt(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultInt", reflect.TypeOf((*MockConfig)(nil).SetDefaultInt), key, value)
}

// Sub mocks base method.
func (m *MockConfig) Sub(key string) port.SettingsManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sub", key)
	ret0, _ := ret[0].(port.SettingsManager)
	return ret0
}

// Sub indicates an expected call of Sub.
func (mr *MockConfigMockRecorder) Sub(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sub", reflect.TypeOf((*MockConfig)(nil).Sub), key)
}

// Unmarshal mocks base method.
func (m *MockConfig) Unmarshal(out interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockConfigMockRecorder) Unmarshal(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockConfig)(nil).Unmarshal), out)
}
